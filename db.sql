-- MySQL Script generated by MySQL Workbench
-- Sat Aug 31 13:06:18 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema stackoverflow
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `stackoverflow` ;

-- -----------------------------------------------------
-- Schema stackoverflow
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `stackoverflow` DEFAULT CHARACTER SET utf8mb4 ;
USE `stackoverflow` ;

-- -----------------------------------------------------
-- Table `stackoverflow`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`user` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `display_name` VARCHAR(45) NOT NULL,
  `email_address` VARCHAR(45) NOT NULL,
  `password` VARCHAR(45) NOT NULL,
  `about_me` VARCHAR(100) NULL,
  `location` VARCHAR(45) NULL,
  `created_date` DATETIME NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `email_address_UNIQUE` (`email_address` ASC) VISIBLE,
  UNIQUE INDEX `display_name_UNIQUE` (`display_name` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stackoverflow`.`post_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`post_type` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`post_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stackoverflow`.`post`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`post` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`post` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `post_title` VARCHAR(45) NOT NULL,
  `post_details` VARCHAR(1000) NOT NULL,
  `created_date` DATETIME NOT NULL,
  `created_by_user_id` INT NOT NULL,
  `parent_question_id` INT NULL,
  `post_id` INT NOT NULL,
  `accepted_answer_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_user_id_idx` (`created_by_user_id` ASC) VISIBLE,
  INDEX `fk_parent_question_id_idx` (`parent_question_id` ASC) VISIBLE,
  INDEX `fk_post_id_idx` (`post_id` ASC) VISIBLE,
  INDEX `fk_accepted_answer_id_idx` (`accepted_answer_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_id`
    FOREIGN KEY (`created_by_user_id`)
    REFERENCES `stackoverflow`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_parent_question_id`
    FOREIGN KEY (`parent_question_id`)
    REFERENCES `stackoverflow`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_post_id`
    FOREIGN KEY (`post_id`)
    REFERENCES `stackoverflow`.`post_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_accepted_answer_id`
    FOREIGN KEY (`accepted_answer_id`)
    REFERENCES `stackoverflow`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stackoverflow`.`answer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`answer` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`answer` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `post_details` VARCHAR(1000) NOT NULL,
  `created_date` DATETIME NOT NULL,
  `created_by_user_id` INT NOT NULL,
  `parent_question_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_user_id_idx` (`created_by_user_id` ASC) VISIBLE,
  INDEX `fk_parent_post_id_idx` (`parent_question_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_id`
    FOREIGN KEY (`created_by_user_id`)
    REFERENCES `stackoverflow`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_parent_post_id`
    FOREIGN KEY (`parent_question_id`)
    REFERENCES `stackoverflow`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stackoverflow`.`tag`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`tag` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`tag` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `tag_name` VARCHAR(25) NOT NULL,
  `tag_description` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stackoverflow`.`post_tag`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`post_tag` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`post_tag` (
  `post_id` INT NULL,
  `tag_id` INT NULL,
  INDEX `fk_post_id_idx` (`post_id` ASC) VISIBLE,
  INDEX `fk_tag_id_idx` (`tag_id` ASC) VISIBLE,
  CONSTRAINT `fk_post_id`
    FOREIGN KEY (`post_id`)
    REFERENCES `stackoverflow`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tag_id`
    FOREIGN KEY (`tag_id`)
    REFERENCES `stackoverflow`.`tag` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stackoverflow`.`comment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`comment` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`comment` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `comment_text` VARCHAR(100) NOT NULL,
  `created_by_user_id` INT NOT NULL,
  `post_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_created_by_user_id_idx` (`created_by_user_id` ASC) VISIBLE,
  INDEX `fk_post_id_idx` (`post_id` ASC) VISIBLE,
  CONSTRAINT `fk_created_by_user_id`
    FOREIGN KEY (`created_by_user_id`)
    REFERENCES `stackoverflow`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_post_id`
    FOREIGN KEY (`post_id`)
    REFERENCES `stackoverflow`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stackoverflow`.`vote_type`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`vote_type` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`vote_type` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `vote_type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `stackoverflow`.`vote`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `stackoverflow`.`vote` ;

CREATE TABLE IF NOT EXISTS `stackoverflow`.`vote` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `post_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `created_date` DATE NOT NULL,
  `vote_type_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_post_id_idx` (`post_id` ASC) VISIBLE,
  INDEX `fk_user_id_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_vote_type_id_idx` (`vote_type_id` ASC) VISIBLE,
  CONSTRAINT `fk_post_id`
    FOREIGN KEY (`post_id`)
    REFERENCES `stackoverflow`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_user_id`
    FOREIGN KEY (`user_id`)
    REFERENCES `stackoverflow`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vote_type_id`
    FOREIGN KEY (`vote_type_id`)
    REFERENCES `stackoverflow`.`vote_type` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
